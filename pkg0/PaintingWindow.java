
package paintapp2.pkg0;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import org.json.simple.JSONArray;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class PaintingWindow extends javax.swing.JFrame implements Node,{
    
    public DrawingEngine panel;

    Graphics g;
    OvalAdd o = new OvalAdd(g);
    LineAdd l = new LineAdd(g);
    RectAdd r = new RectAdd(g);
    TriangleAdd t = new TriangleAdd(g);
    
    /**
     * Creates new form PaintingWindow
     */
    
   
    public PaintingWindow() {
        
        initComponents();
        
        panel = (DrawingEngine)paintingWindow;
        
        //(Panel)paintingWindow.setCombo(comboShapes); //try to fix this
        

    }
    public void addToComboAndToPanel(Shape shape)
    {
       // panel.setCombo(comboShapes);
        //panel.setCanvas(g);
        panel.addShape(shape);
        syncCombo();
        panel.setCombo(comboShapes);
        panel.refresh(null);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Circle = new javax.swing.JButton();
        LineSegment = new javax.swing.JButton();
        Square = new javax.swing.JButton();
        Rectangle = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        comboShapes = new javax.swing.JComboBox<>();
        Colorize = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        paintingWindow = new Panel();
        copyButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Save = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Drawing App");

        Circle.setText("Oval");
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });

        LineSegment.setText("Line segment");
        LineSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineSegmentActionPerformed(evt);
            }
        });

        Square.setText("Triangle");
        Square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SquareActionPerformed(evt);
            }
        });

        Rectangle.setText("Rectangle");
        Rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleActionPerformed(evt);
            }
        });

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        comboShapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboShapesActionPerformed(evt);
            }
        });

        Colorize.setText("Colorize");
        Colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorizeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Select Shape");

        paintingWindow.setBackground(new java.awt.Color(255, 255, 255));
        paintingWindow.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255)));
        paintingWindow.setPreferredSize(new java.awt.Dimension(500, 235));

        javax.swing.GroupLayout paintingWindowLayout = new javax.swing.GroupLayout(paintingWindow);
        paintingWindow.setLayout(paintingWindowLayout);
        paintingWindowLayout.setHorizontalGroup(
            paintingWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );
        paintingWindowLayout.setVerticalGroup(
            paintingWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 233, Short.MAX_VALUE)
        );

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jMenu1.add(Save);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Load");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(45, 45, 45))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Colorize, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Delete, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                    .addComponent(comboShapes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(copyButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Circle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(LineSegment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(Square, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addGap(30, 30, 30)
                        .addComponent(Rectangle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(88, 88, 88))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(paintingWindow, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                        .addGap(5, 5, 5)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboShapes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Colorize)
                            .addComponent(Delete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Circle)
                            .addComponent(LineSegment)
                            .addComponent(Square)
                            .addComponent(Rectangle))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(paintingWindow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SquareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SquareActionPerformed
        // TODO add your handling code here:
        //squareAdd s = new squareAdd(g);
        Triangle triangle = new Triangle();
        
        t.setTri(triangle);
        t.setVisible(true);
        t.setParentNode(this);
        this.setVisible(false);
        
       
    }//GEN-LAST:event_SquareActionPerformed

    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleActionPerformed
        // TODO add your handling code here:
        Oval oval = new Oval();
        o.setOval(oval);
        o.setParentNode(this);
        o.setVisible(true);
        this.setVisible(false);
        
    
    }//GEN-LAST:event_CircleActionPerformed

    private void LineSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineSegmentActionPerformed
        // TODO add your handling code here:
        LineSegment lineSegment = new LineSegment();
        l.setLine(lineSegment);
        l.setVisible(true);
        this.setVisible(false);
        l.setParentNode(this);
        

    }//GEN-LAST:event_LineSegmentActionPerformed

    private void comboShapesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboShapesActionPerformed
        // TODO add your handling code here:   
    }//GEN-LAST:event_comboShapesActionPerformed

    private void ColorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorizeActionPerformed
        // TODO add your handling code here:
        if(comboShapes.getSelectedIndex()==-1) return;
        Color color = JColorChooser.showDialog(null, "choose a color", Color.BLACK);
        int i = comboShapes.getSelectedIndex();
        Shape[] shapes = panel.getShapes();
        shapes[i].setFillColor(color);
        
        panel.refresh(null);
    }//GEN-LAST:event_ColorizeActionPerformed

    private void RectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleActionPerformed
        // TODO add your handling code here:
        Rectangle rect = new Rectangle();
        r.setRect(rect);
        r.setVisible(true);
        this.setVisible(false);
        r.setParentNode(this);
        
    }//GEN-LAST:event_RectangleActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
        if(comboShapes.getSelectedIndex()==-1) return;
        int i=comboShapes.getSelectedIndex();
        Shape[] shapes = panel.getShapes();
        panel.removeShape(shapes[i]);
        //paintingWindow.paintComponent(g);
        panel.refresh(null);
        syncCombo();
        panel.setCombo(comboShapes);
        

  
    }//GEN-LAST:event_DeleteActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        if(comboShapes.getSelectedIndex()==-1) return;
        int i=comboShapes.getSelectedIndex();
        Shape[] shapes =  panel.getShapes();
        //Shape[] shapes = panel.getShapes();
        Copyable s = null;
        try {
            s = (Copyable)shapes[i].copy();
        } catch (CloneNotSupportedException ex) {
            //Logger.getLogger(PaintingWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
       // panel.addShape((Shape)s);
        addToComboAndToPanel((Shape)s);
        //panel.refresh(null);
        //syncCombo();
        
        
    }//GEN-LAST:event_copyButtonActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here: 
        String path;

        JFileChooser fileChooser = new JFileChooser();
        //fileChooser.addChoosableFileFilter(new FileFilterImpl());

        fileChooser.setAcceptAllFileFilterUsed(false);

        if (fileChooser.showDialog(null, "Save Drawing") == JFileChooser.APPROVE_OPTION) {
            path = fileChooser.getSelectedFile().getPath();
        } else {
            return;
        }
        JSONArray shapeList = new JSONArray();
        Shape[] shapes = panel.getShapes();
        
        for(Shape shape : shapes){
            shapeList.add(shape.tojson());
        }
        try (FileWriter file = new FileWriter(path)) {

            file.write(shapeList.toJSONString()); 
            file.flush();
      } catch (IOException e) {
         // TODO Auto-generated catch block
         e.printStackTrace();
      }
        
    }//GEN-LAST:event_SaveActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        String path;

        JFileChooser fileChooser = new JFileChooser();

        if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            path = fileChooser.getSelectedFile().getPath();
        } else {
            return;
        }
        
        panel.clearShapes();
        
        
        JSONParser jsonParser = new JSONParser();

        try (FileReader reader = new FileReader(path))
        {
            Object obj = jsonParser.parse(reader);
            JSONArray shapeList = (JSONArray) obj;
            for(int i = 0;i<shapeList.size();i++){
                JSONObject jo = (JSONObject) shapeList.get(i);
                String Type = (String) jo.get("Type");
                
                if(Type.equals("Oval")){
                    Oval oval = new Oval();
                    oval.setBorderColor(Color.decode((String)jo.get("borderColor")));
                    oval.setFillColor(Color.decode((String)jo.get("fillColor")));
                    long ox =(long) jo.get("Positionx");
                    long oy =(long) jo.get("Positiony");
                    long H =(long) jo.get("Height");
                    long W =(long) jo.get("Width");
                    Point p = new Point((int) ox,(int) oy);
                    oval.setPosition(p);
                    oval.setHeight((int)H);
                    oval.setWidth((int)W);
                    oval.setHandlers();
                   
                    
                    addToComboAndToPanel(oval);
                    panel.refresh(null);
                    
                }
                
                else if(Type.equals("Rect")){
                    Rectangle rect = new Rectangle();
                    rect.setBorderColor(Color.decode((String)jo.get("borderColor")));
                    rect.setFillColor(Color.decode((String)jo.get("fillColor")));
                    long ox =(long) jo.get("Positionx");
                    long oy =(long) jo.get("Positiony");
                    long H =(long) jo.get("Height");
                    long W =(long) jo.get("Width");
                    Point p = new Point((int) ox,(int) oy);
                    rect.setPosition(p);
                    rect.setHeight((int)H);
                    rect.setWidth((int)W);
                    rect.setHandlers();
                    addToComboAndToPanel(rect);
                    panel.refresh(null);
                }
                
                else if(Type.equals("Line")){
                    LineSegment line = new LineSegment();
                    line.setBorderColor(Color.decode((String)jo.get("borderColor")));
                    long ox1 =(long) jo.get("Positionx1");
                    long oy1 =(long) jo.get("Positiony1");
                    long ox2 =(long) jo.get("Positionx2");
                    long oy2 =(long) jo.get("Positiony2");
                    Point p1 = new Point((int) ox1,(int) oy1);
                    line.setPosition(p1);
                    Point p2 = new Point((int) ox2,(int) oy2);
                    line.setP2(p2);
                    line.setHandlers();
                    
                    addToComboAndToPanel(line);
                    panel.refresh(null);
                }
                else if(Type.equals("Tri")){
                    Triangle tri = new Triangle();
                    tri.setBorderColor(Color.decode((String)jo.get("borderColor")));
                    tri.setFillColor(Color.decode((String)jo.get("fillColor")));
                    long ox1 =(long) jo.get("Positionx1");
                    long oy1 =(long) jo.get("Positiony1");
                    long ox2 =(long) jo.get("Positionx2");
                    long oy2 =(long) jo.get("Positiony2");
                    long ox3 =(long) jo.get("Positionx3");
                    long oy3 =(long) jo.get("Positiony3");
                    Point p1 = new Point((int) ox1,(int) oy1);
                    tri.setPosition(p1);
                    Point p2 = new Point((int) ox2,(int) oy2);
                    tri.setPoint2(p2);
                    Point p3 = new Point((int) ox3,(int) oy3);
                    tri.setPoint2(p2);
                    tri.setPoint3(p3);
                    tri.setHandlers();
                    
                    addToComboAndToPanel(tri);
                    panel.refresh(null);
                } 
                
            }
            
           reader.close();  
        } 
        catch (FileNotFoundException e) {
            e.printStackTrace();
        } 
        catch (IOException e) {
            e.printStackTrace();
        } 
        catch (ParseException e) {
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaintingWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaintingWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaintingWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaintingWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaintingWindow().setVisible(true);
            }
        });
    }
     void syncCombo()
    {
        //corrects the shapes numbering in combo after deleting a shape
        //or to add new shape to combo
        comboShapes.removeAllItems();
        int o = 0, l = 0, r = 0, t=0; //numbering of circles,lines,squares..etc
        Shape[] shapes = panel.getShapes();
        for(Shape sh : shapes)
        {
            if(sh instanceof Oval)
            {
                o++;
                comboShapes.addItem("Oval_"+o);
            }
            else if(sh instanceof Triangle)
            {
                t++;
                comboShapes.addItem("Triangle_"+t);
            }
            else if(sh instanceof LineSegment)
            {
                l++;
                comboShapes.addItem("LineSegment_"+l);
            }
            else if(sh instanceof Rectangle)
            {
                r++;
                comboShapes.addItem("Rectangle_"+r);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Circle;
    private javax.swing.JButton Colorize;
    private javax.swing.JButton Delete;
    private javax.swing.JButton LineSegment;
    private javax.swing.JButton Rectangle;
    private javax.swing.JMenuItem Save;
    private javax.swing.JButton Square;
    static javax.swing.JComboBox<String> comboShapes;
    private javax.swing.JButton copyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel paintingWindow;
    // End of variables declaration//GEN-END:variables


    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setParentNode(Node node) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private static class FileFilterImpl implements FileFilter {

        public FileFilterImpl() {
        }

        @Override
        public boolean accept(File f) {
            if (f.isDirectory()) return true;
            return f.getName().toLowerCase().endsWith(".json");
        }

        public String getDescription() {
            return "JSON file (*.json)";
        }
    }

}
